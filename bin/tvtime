#!/usr/bin/ruby

require 'highline'
require 'tvtime'

# Basic usage

Signal::trap("INT") do
    exit
end

Signal::trap("TERM") do
    exit
end


TVTime::Settings::create_default! unless TVTime::Settings::exists?


cli = HighLine.new

begin
    settings = TVTime::Settings.new

    cli.say("\n")
    cli.say("\n")
    cli.say("\n")

    cli.choose do | main_menu |

        main_menu.prompt = "What do you want to do?"


        main_menu.choice("Catalog Downloads") do
            confirm = cli.ask("This command will move any episodes from your download dir to your Library. Are you sure? [Y/N] ") { |yn| yn.limit = 1, yn.validate = /[yn]/i }
            TVTime::catalog_downloads!( settings ) if confirm.downcase == 'y'
        end



        main_menu.choice("Download Missing Episodes") do
            confirm = cli.ask("This command will open any missing magnet links. Are you sure? [Y/N]") { |yn| yn.limit = 1, yn.validate = /[yn]/i }
            TVTime::download_missing!( settings ) if confirm.downcase == 'y'
        end


        main_menu.choice("Manage Series") do
            cli.choose do | series_menu |
                series_menu.choice("Add Series") do
                    title = cli.ask "What series would you like to search for?"
                    search = TVTime::Search.new( settings )
                    results = search.find_series( title )
                    cli.choose do | results_menu |
                        results_menu.prompt = "Which series would you like to add?"
                        results.each do | series |
                            results_menu.choice( series.name + ' : ' + series.network ) do
                                settings.add_series!( series )
                                settings.save!
                            end
                        end
                        results_menu.choice( "cancel" ) do
                        end
                    end
                end

                series_menu.choice("Delete Series") do

                    cli.choose do | delete_menu |
                        delete_menu.prompt = "Which series would you like to delete?"
                        settings[:series].each do | series |
                            delete_menu.choice( series[:name] + ' : ' + series[:network] ) do
                                confirm = cli.ask("Are you sure? [Y/N]") { |yn| yn.limit = 1, yn.validate = /[yn]/i }
                                settings.remove_series!( series[:id] ) if confirm.downcase == 'y'
                                settings.save!
                            end
                        end

                        delete_menu.choice( "cancel" ) do
                        end
                    end
                end

                series_menu.choice("List TV Series") do
                    settings[:series].each do | series |
                        cli.say( series[:name] + ' : ' + series[:network] )
                    end
                end

            end
        end


        main_menu.choice("Manage Directories") do
            cli.choose do | dir_menu |
                {:library_path => 'Library', :download_path => 'Download' }.each do | k, v |
                    dir_menu.choice( "Update #{v} Path" ) do
                        path = cli.ask('Enter New Path')
                        TVTime::Settings::set!( k, path )
                    end
                    dir_menu.choice( "Open #{v} Path" ) do
                        cmd = "open '#{settings[k]}'"
                        puts cmd
                        system( cmd )
                    end
                end
                dir_menu.choice( "cancel" ) do
                end
            end
        end


        main_menu.choice("Toggle Test Mode ( Currently #{TVTime::test_mode_enabled? ? 'Enabled' : 'Disabled'} )") do
            TVTime::enable_test_mode!( !TVTime::test_mode_enabled? )
        end

        main_menu.choice("Set TVDB API Key ( #{settings[:tvdb_api_key] or 'Not Set'} )") do
            tvdb_api_key = cli.ask('Enter TVDB API Key ( http://www.thetvdb.com/?tab=register )')
            TVTime::Settings::set!(:tvdb_api_key, tvdb_api_key )
        end

        main_menu.choice("Reload Settings") do
            puts "reloaded" # will be reloaded on next loop
        end

        main_menu.choice("quit") do
            exit(0)
        end
    end
end while true
